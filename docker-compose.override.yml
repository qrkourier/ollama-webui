volumes:
  ollama_home: {}
  zrok_env: {}

services:
  ollama-init:
    image: busybox
    volumes:
      - ollama_home:/home
    command: chown -Rc 1000:1000 /home

  ollama:
    depends_on:
      - ollama-init
    profiles:
      - zrok
      - ziti
    image: ollama/ollama:0.1.20
    user: "1000:1000"
    ports: []
      # - "11434:11434"
    volumes:
      - ollama_home:/home
    environment:
      HOME: /home
      OLLAMA_HOST: "0.0.0.0"
      OLLAMA_ORIGINS: "*"
      OLLAMA_MODELS: /home/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities:
                - gpu

  ollama-webui-init:
    image: busybox
    volumes:
      - ollama-webui:/mnt
    command: chown -Rc 65535:65535 /mnt

  ollama-webui:
    depends_on:
      - ollama-webui-init
    profiles:
      - zrok
      - ziti
    image: ghcr.io/ollama-webui/ollama-webui:main  #@sha256:5fefc347923657fe5a4c4a7b0ddeab8823bbe13398291fbf9de1915a41f372b1
    # user: "65534:65534"
    ports: []
      # - 127.0.0.1:3173:8080

  litellm:
    profiles:
      - zrok
      - ziti
    image: ghcr.io/berriai/litellm:main-latest@sha256:fc1d7d4d9fd6352d0052580a513cfb9c61972f9018633a7d7f77350d095aae46
    volumes:
      - ./litellm.yml:/app/config.yml
    ports: []
      # - "11435:8000"
    command: [ "--config", "/app/config.yml", "--port", "8000", "--num_workers", "8" ]

  # set file ownership
  zrok-init:
    image: busybox
    # matches uid:gid of "nobody" in zrok container image
    command: chown -Rc 65534:65534 /mnt/
    user: root
    volumes:
      - zrok_env:/mnt

  # enable zrok environment
  zrok-enable:
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    depends_on:
      zrok-init:
        condition: service_completed_successfully
    entrypoint: zrok-enable.bash
    volumes:
      - zrok_env:/mnt
    environment:
      STATE_DIRECTORY: /mnt
      ZROK_ENABLE_TOKEN:
      ZROK_API_ENDPOINT: https://ctrl.ken.demo.openziti.org
      ZROK_ENVIRONMENT_NAME:  ollama-webui

  # reserve zrok frontend subdomain and start sharing the target
  zrok-share:
    profiles:
      - zrok
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    restart: unless-stopped
    entrypoint: zrok-share.bash
    depends_on:
      zrok-enable:
        condition: service_completed_successfully
    volumes:
      - zrok_env:/mnt
      - ./zrok.Caddyfile:/Caddyfile
    environment:
      # internal configuration
      STATE_DIRECTORY: /mnt  # zrok homedir in container
      BCRYPT_HASH:           # Caddy reads this to set basic auth

      # most relevant options
      ZROK_UNIQUE_NAME:     ollama
      ZROK_BACKEND_MODE:    caddy
      ZROK_TARGET:          /Caddyfile
      ZROK_INSECURE:        # "--insecure" if proxy target has unverifiable TLS server certificate
      ZROK_OAUTH_PROVIDER:  # google, github
      ZROK_OAUTH_EMAILS:    # allow space-separated list of OAuth email addresses or @domain.tld
      ZROK_BASIC_AUTH:      # username:password, mutually-exclusive with ZROK_OAUTH_PROVIDER

      # least relevant options
      ZROK_VERBOSE:           # "--verbose"
      ZROK_SHARE_OPTS:        # additional arguments to "zrok reserve public" command
      ZROK_FRONTENDS:         # "public"
      PFXLOG_NO_JSON: "true"  # suppress JSON logging format

  ziti:
    profiles:
      - ziti
    image: kbinghamnetfoundry/ziti-host:0.22.20
    restart: unless-stopped
    environment:
      ZITI_IDENTITY_JSON:
