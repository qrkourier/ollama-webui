networks:
  ollama:
    driver: bridge

volumes:
  ollama-webui: {}
  ollama_home: {}
  caddy_data: {}
  caddy_config: {}
  ziti-router: {}

services:
  ollama-init:
    image: busybox
    volumes:
      - ollama_home:/home
    command: chown -Rc 1000:1000 /home

  ollama:
    image: ollama/ollama:latest
    restart: unless-stopped
    networks:
      - ollama
    depends_on:
      - ollama-init
    # profiles:
    #   - ziti
    user: "1000:1000"
    ports: []
      # - "11434:11434"
    volumes:
      - ollama_home:/home
      - ~/Downloads/Cache/ollama-models:/home/models
    environment:
      HOME: /home
      OLLAMA_HOST: "0.0.0.0"
      OLLAMA_ORIGINS: "*"
      OLLAMA_MODELS: /home/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities:
                - gpu

  open-webui-init:
    image: busybox
    volumes:
      - open-webui:/mnt
    command: chown -Rc 65535:65535 /mnt

  open-webui:
    image: ghcr.io/open-webui/open-webui:latest
    restart: unless-stopped
    network_mode: service:ziti-router
    depends_on:
      - open-webui-init
    volumes:
      - ollama-webui:/app/backend/data
    environment:
      - OLLAMA_BASE_URL=https://ollama.ziti.bingnet.cloud

  ziti:
    networks:
      - ollama
    # profiles:
    #   - ziti
    image: docker.io/openziti/ziti-host:latest
    restart: unless-stopped
    environment:
      ZITI_IDENTITY_JSON:
    #command: run-host --verbose=4

  caddy:
    #profiles:
    #  - caddy
    network_mode: service:ziti-router
    # networks:
    #   - ollama
    build:
      context: .
      dockerfile: caddy.Dockerfile
    restart: unless-stopped
    environment:
      CF_API_TOKEN:
    # expose:
    #   - 80
    #   - 443
    #   - "443/udp"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
      - /home/kbingham/Sites/stable-diffusion-webui-docker/output/comfy:/mnt/comfy
    user: "$PUID:$PGID"
  init:
    image: busybox
    command: >
        chown -R "$PUID:$PGID" /data /config;
        chmod -R ug=rwX,o-rwx   /data /config;
    volumes:
      - caddy_data:/data
      - caddy_config:/config

  ziti-router-chown:
    image: busybox
    command: chown -R ${ZIGGY_UID:-2171} /mnt
    volumes:
      - ziti-router:/mnt

  ziti-router:
    restart: unless-stopped
    networks:
      ollama:
        aliases:
          - ollama-router.192.168.1.116.xip.bingnet.cloud
    # extra_hosts:
    #   - host.docker.internal:host-gateway
    image: ${ZITI_ROUTER_IMAGE:-openziti/ziti-router}
    pull_policy: never
    depends_on:
      ziti-router-chown:
        condition: service_completed_successfully
    volumes:
      - ziti-router:/mnt
    working_dir: /mnt
    # these declared vars pass through to container and should be assigned in an .env file or exported from parent env
    # to ensure consistency throughout the compose project
    environment:
      # *** these are the important vars to set ***
      ZITI_CTRL_ADVERTISED_ADDRESS: ziti.bingnet.cloud
      ZITI_CTRL_ADVERTISED_PORT: 443
      ZITI_ENROLL_TOKEN:                                              # enrollment token for this router (required)
      ZITI_ROUTER_ADVERTISED_ADDRESS: ollama-router.192.168.1.116.xip.bingnet.cloud
      ZITI_ROUTER_ADVERTISED_PORT: ${ZITI_ROUTER_ADVERTISED_PORT:-80}
      ZITI_ROUTER_MODE: tproxy
      # *** less relevant vars below ***
      ZITI_ROUTER_TYPE: edge           # edge, fabric
      ZITI_ROUTER_NAME: ziti-router    # ensure the computed filenames based on this var are consistent, not based on
                                       #  ephemeral container id
      ZITI_BOOTSTRAP_CONFIG: force
      ZITI_BOOTSTRAP_ENROLLMENT: true  # enroll with controller if "true," overwrite if "force"
      PFXLOG_NO_JSON: true
      ZITI_TIME_FORMAT: utc
    command: run config.yml
    ports:
      # ensure this port matches the value of ZITI_ROUTER_ADVERTISED_PORT in the container
      - ${ZITI_INTERFACE:-0.0.0.0}:${ZITI_ROUTER_ADVERTISED_PORT:-80}:${ZITI_ROUTER_ADVERTISED_PORT:-80}
      - 0.0.0.0:443:443/tcp
    expose:
      - ${ZITI_ROUTER_ADVERTISED_PORT:-80}
      - 8080  # open-webui, not desired, but Docker bridge is open on the inside?
      - 80    # caddy ports
      - 443
      - "443/udp"
    healthcheck:
      test:
        - CMD
        - ziti
        - agent
        - stats
      interval: 3s
      timeout: 3s
      retries: 5
      start_period: 15s

    # Additional config for other containers using this router as a transparent intercepting proxy sidecar and default
    # nameserver - dns, user, cap_add are required when ZITI_ROUTER_MODE=tproxy (see adjacent README.md for TPROXY
    # example)
    #
    dns:
      - 127.0.0.1
      - 1.1.1.1
    user: root  # required to create TPROXY routes
    cap_add:
      - NET_ADMIN  # required to create TPROXY  rules
